Implementation notes

@author LucieCBurgess
@author MattBostock
@author SonamSadarangani

Part II - Implement Vendor Parser

1. Implement vendor.ProgramParser - use the src/main/scala directory. Use some example program files under the programs
    directory as test cases - the implementation should work for these files

    Implementation is in src/main/scala/vendor/ProgramParserConcrete

NB. I haven't yet deal with exceptions to the main instruction format which is is Vector[String, Int].
Not sure whether to do that now, or at part IV?


2. Modify factory.VirtualMachineFactory to return an instance of the implementation from the vendorParser method

This is very simple: just have to modify the code in VirtualMachineFactory to use ProgramParserConcrete as
its type of ProgramParser

Part III - Implement Bytecodes

3. Implement a bytecode for each of the defined bytecodes in the bc.ByteCodeValues trait (under bc.ByteCode trait)
    These should each be classes which extend the ByteCode trait.

 Fairly straightforward - note the pop() instruction in the (as yet unimplemented) VirtualMachine class is a tuple (int, vm)

4. Implement the bc.ByteCodeFactory that creates new bytecodes given a byte and arguments.
If you find it helpful you can override the toString method to print out the bytecode names to the console so you can
see if your code is working correctly.

5. Implement bc.ByteCodeParser. Can be tested easily from the console by providing a vector of bytes and inspecting the returned
vector to ensure it is working correctly. NB a byte is the corresponding position of the bytecode name in the vector of names

i.e. bytecode: scala.collection.immutable.Map[String,Byte] = Map(ineg -> 7, iswap -> 11, idiv -> 5, print -> 12, iinc -> 8, imul -> 4, iconst -> 1, idec -> 9, isub -> 3, irem -> 6, idup -> 10, iadd -> 2)

For instance given the following vector:
val a = Vector(bytecode("iconst"), 4.toByte, bytecode("iconst"), 5.toByte, bytecode("iadd"), bytecode("print")

a.parse <- produces a Vector of 4 ByteCode objects: Vector(ConstByteCode, ConstByteCode, AddByteCode, PrintByteCode)

Note the vector of ByteCode objects has 4 elements as iconst instructions have arguments.
NB. This didn't work with a for loop - couldn't dynamically update the index, error: reassignment to val.

Using a while loop instead and updating the index until it exceeds a boundary condition fixes the problem.







